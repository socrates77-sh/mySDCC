gpasm-2.0.0_beta2 (Nov  6 2017)_mulchar.asm       2017-11-23  16:21:13         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;--------------------------------------------------------
                      00002 ; File Created by SN-SDCC : SinoMCU ANSI-C Compiler
                      00003 ; Version 1.0.0 (Sep 28 2017) (MINGW32)
                      00004 ; This file was generated Thu Nov 23 16:21:13 2017
                      00005 ;--------------------------------------------------------
                      00006 ; MC35 port for the RISC core
                      00007 ;--------------------------------------------------------
                      00008 ;       .file   "../libsdcc_mc35/_mulchar.c"
                      00009         list    p=2K7041
                      00010         radix dec
                      00011         include "2K7041.inc"
                      00001                 LIST
                      00002 ;mc35p7041.inc    Standard Header File, Version 1.00 by Sinomcu
                      00076                 LIST
                      00012 ;--------------------------------------------------------
                      00013 ; external declarations
                      00014 ;--------------------------------------------------------
                      00015 
                      00016         extern STK06
                      00017         extern STK05
                      00018         extern STK04
                      00019         extern STK03
                      00020         extern STK02
                      00021         extern STK01
                      00022         extern STK00
                      00023 ;--------------------------------------------------------
                      00024 ; global declarations
                      00025 ;--------------------------------------------------------
                      00026         global  __mulchar
                      00027 
                      00028 ;--------------------------------------------------------
                      00029 ; global definitions
                      00030 ;--------------------------------------------------------
                      00031 ;--------------------------------------------------------
                      00032 ; absolute symbol definitions
                      00033 ;--------------------------------------------------------
                      00034 ;--------------------------------------------------------
                      00035 ; compiler-defined variables
                      00036 ;--------------------------------------------------------
                      00037 UDL__mulchar_0  udata
0000                  00038 r0x1000 res     1
0000                  00039 r0x1001 res     1
0001                  00040 r0x1002 res     1
0001                  00041 r0x1003 res     1
0002                  00042 r0x1004 res     1
                      00043 ;--------------------------------------------------------
                      00044 ; initialized data
                      00045 ;--------------------------------------------------------
                      00046 
                      00047 ;@Allocation info for local variables in function '_mulchar'
                      00048 ;@_mulchar _mulchar                  Allocated to registers ;size:2
                      00049 ;@_mulchar b                         Allocated to registers r0x1001 ;size:1
                      00050 ;@_mulchar a                         Allocated to registers r0x1000 ;size:1
                      00051 ;@_mulchar result                    Allocated to registers r0x1002 ;size:1
                      00052 ;@_mulchar i                         Allocated to registers r0x1003 ;size:1
                      00053 ;@end Allocation info for local variables in function '_mulchar';
                      00054 
                      00055 ;--------------------------------------------------------
                      00056 ; overlayable items in internal ram 
                      00057 ;--------------------------------------------------------
                      00058 ;       udata_ovr
                      00059 ;--------------------------------------------------------
                      00060 ; code
                      00061 ;--------------------------------------------------------
                      00062 code__mulchar   code
                      00063 ;***
                      00064 ;  pBlock Stats: dbName = C
                      00065 ;***
                      00066 ;entry:  __mulchar      ;Function start
                      00067 ; 2 exit points
                      00068 ;has an exit
                      00069 ;6 compiler assigned registers:
                      00070 ;   r0x1000
                      00071 ;   STK00
                      00072 ;   r0x1001
                      00073 ;   r0x1002
                      00074 ;   r0x1003
                      00075 ;   r0x1004
                      00076 ;; Starting pCode block
                      00077 ;;[ICODE] ../libsdcc_mc35/_mulchar.c:33:  _entry($16) :
                      00078 ;;[ICODE] ../libsdcc_mc35/_mulchar.c:33:        proc __mulchar [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char function ( char fixed, char fixed) fixed}
0000                  00079 __mulchar       ;Function start
                      00080 ; 2 exit points
                      00081 ;;[ICODE] ../libsdcc_mc35/_mulchar.c:33: iTemp0 [k2 lr3:23 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ __mulchar_a_1_1}[r0x1000 ] = recv __mulchar [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char function ( char fixed, char fixed) fixed}
                      00082 ;       .line   33; "../libsdcc_mc35/_mulchar.c"        _mulchar (char a, char b)
0000   1F00           00083         MOVRA   r0x1000
                      00084 ;;[ICODE] ../libsdcc_mc35/_mulchar.c:33: iTemp1 [k4 lr4:23 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ __mulchar_b_1_1}[r0x1001 ] = recv __mulchar [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char function ( char fixed, char fixed) fixed}
0001   1E00           00085         MOVAR   STK00
0002   1F00           00086         MOVRA   r0x1001
                      00087 ;;[ICODE] ../libsdcc_mc35/_mulchar.c:35:        iTemp2 [k6 lr5:24 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ __mulchar_result_1_2}[r0x1002 ] := 0x0 {const-unsigned-char literal}
                      00088 ;       .line   35; "../libsdcc_mc35/_mulchar.c"        char result = 0;
0003   2B00           00089         CLRR    r0x1002
                      00090 ;;[ICODE] ../libsdcc_mc35/_mulchar.c:39:        iTemp3 [k8 lr6:23 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{unsigned-char fixed}{ sir@ __mulchar_i_1_2}[r0x1003 ] := 0x8 {unsigned-char literal}
                      00091 ;       .line   39; "../libsdcc_mc35/_mulchar.c"        for (i = 0; i < 8u; i++) {
0004   2D08           00092         MOVAI   0x08
0005   1F00           00093         MOVRA   r0x1003
                      00094 ;;[ICODE] ../libsdcc_mc35/_mulchar.c:39:  _forcontinue_0($14) :
                      00095 ;;[ICODE] ../libsdcc_mc35/_mulchar.c:41:        iTemp4 [k10 lr9:10 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register} = iTemp0 [k2 lr3:23 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ __mulchar_a_1_1}[r0x1000 ] & 0x1 {char literal}
0006                  00096 _00118_DS_
                      00097 ;       .line   41; "../libsdcc_mc35/_mulchar.c"        if (a & (unsigned char)0x0001u) result += b;
0006   5800           00098         JBSET   r0x1000,0
0007   8000           00099         GOTO    _00114_DS_
                      00100 ;;[ICODE] ../libsdcc_mc35/_mulchar.c:41:        if iTemp4 [k10 lr9:10 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register} == 0 goto _iffalse_3($10)
                      00101 ;;[ICODE] ../libsdcc_mc35/_mulchar.c:41:        iTemp2 [k6 lr5:24 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ __mulchar_result_1_2}[r0x1002 ] = iTemp2 [k6 lr5:24 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ __mulchar_result_1_2}[r0x1002 ] + iTemp1 [k4 lr4:23 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ __mulchar_b_1_1}[r0x1001 ]
0008   1E00           00102         MOVAR   r0x1001
0009   1300           00103         ADDRA   r0x1002
                      00104 ;;[ICODE] ../libsdcc_mc35/_mulchar.c:44:  _iffalse_3($10) :
                      00105 ;;[ICODE] ../libsdcc_mc35/_mulchar.c:45:        iTemp12 [k18 lr14:15 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-char fixed}[r0x1004 ] = (unsigned-char fixed)iTemp0 [k2 lr3:23 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ __mulchar_a_1_1}[r0x1000 ]
000A                  00106 _00114_DS_
                      00107 ;       .line   45; "../libsdcc_mc35/_mulchar.c"        a = ((unsigned char)a) >> 1u;
000A   1E00           00108         MOVAR   r0x1000
000B   1F00           00109         MOVRA   r0x1004
                      00110 ;;[ICODE] ../libsdcc_mc35/_mulchar.c:45:        iTemp0 [k2 lr3:23 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ __mulchar_a_1_1}[r0x1000 ] = iTemp12 [k18 lr14:15 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-char fixed}[r0x1004 ] >> 0x1 {const-unsigned-int literal}
                      00111 ;;shiftRight_Left2ResultLit:5270: shCount=1, size=1, sign=0, same=0, offr=0
000C   4286           00112         BCLR    STATUS,2
000D   0800           00113         RRAR    r0x1004
000E   1F00           00114         MOVRA   r0x1000
                      00115 ;;[ICODE] ../libsdcc_mc35/_mulchar.c:46:        iTemp15 [k21 lr17:18 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-int register}[r0x1004 r0x1005 ] = iTemp1 [k4 lr4:23 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ __mulchar_b_1_1}[r0x1001 ] << 0x1 {const-unsigned-int literal}
                      00116 ;       .line   46; "../libsdcc_mc35/_mulchar.c"        b <<= 1u;
000F   4286           00117         BCLR    STATUS,2
0010   0A00           00118         RLAR    r0x1001
0011   1F00           00119         MOVRA   r0x1001
0012   1F00           00120         MOVRA   r0x1004
                      00121 ;;[ICODE] ../libsdcc_mc35/_mulchar.c:46:        iTemp1 [k4 lr4:23 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ __mulchar_b_1_1}[r0x1001 ] = (char fixed)iTemp15 [k21 lr17:18 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{unsigned-int register}[r0x1004 r0x1005 ]
                      00122 ;;99    MOVAR   r0x1004
                      00123 ;;[ICODE] ../libsdcc_mc35/_mulchar.c:46:        iTemp17 [k23 lr20:21 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x1004 ] = (char register)iTemp3 [k8 lr6:23 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{unsigned-char fixed}{ sir@ __mulchar_i_1_2}[r0x1003 ]
0013   1E00           00124         MOVAR   r0x1003
0014   1F00           00125         MOVRA   r0x1004
                      00126 ;;[ICODE] ../libsdcc_mc35/_mulchar.c:46:        iTemp3 [k8 lr6:23 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{unsigned-char fixed}{ sir@ __mulchar_i_1_2}[r0x1003 ] = iTemp17 [k23 lr20:21 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char register}[r0x1004 ] - 0x1 {const-char literal}
0015   2500           00127         DJZAR   r0x1004
0016   0000           00128         NOP     
0017   1F00           00129         MOVRA   r0x1003
                      00130 ;;[ICODE] ../libsdcc_mc35/_mulchar.c:39:        if iTemp3 [k8 lr6:23 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{unsigned-char fixed}{ sir@ __mulchar_i_1_2}[r0x1003 ] != 0 goto _forcontinue_0($14)
                      00131 ;       .line   39; "../libsdcc_mc35/_mulchar.c"        for (i = 0; i < 8u; i++) {
0018   2D00           00132         MOVAI   0x00
0019   1800           00133         ORAR    r0x1003
001A   5886           00134         JBSET   STATUS,0
001B   8000           00135         GOTO    _00118_DS_
                      00136 ;;[ICODE] ../libsdcc_mc35/_mulchar.c:49:        ret iTemp2 [k6 lr5:24 so:0]{ ia0 a2p0 re1 rm0 nos0 ru0 dp0}{char fixed}{ sir@ __mulchar_result_1_2}[r0x1002 ]
                      00137 ;       .line   49; "../libsdcc_mc35/_mulchar.c"        return result;
001C   1E00           00138         MOVAR   r0x1002
                      00139 ;;[ICODE] ../libsdcc_mc35/_mulchar.c:49:  _return($15) :
                      00140 ;;[ICODE] ../libsdcc_mc35/_mulchar.c:49:        eproc __mulchar [k1 lr0:0 so:0]{ ia0 a2p0 re0 rm0 nos0 ru0 dp0}{char function ( char fixed, char fixed) fixed}
001D   0E00           00141         RETURN  
                      00142 ; exit point of __mulchar
                      00143 
                      00144 
                      00145 ;       code size estimation:
                      00146 ;          30+    0 =    30 instructions (   60 byte)
                      00147 
                      00148         end
gpasm-2.0.0_beta2 (Nov  6 2017)_mulchar.asm       2017-11-23  16:21:13         PAGE  2


SYMBOL TABLE
  LABEL                             VALUE

C                                 00000002
DC                                00000001
FSR                               00000083
FSR0                              00000083
FSR1                              00000084
HIBYTE                            00000082
INDF                              000000E7
PCH                               000000CF
PCL                               000000CE
STATUS                            00000086
STK00                             00000000
STK01                             00000000
STK02                             00000000
STK03                             00000000
STK04                             00000000
STK05                             00000000
STK06                             00000000
Z                                 00000000
_00114_DS_                        0000000A
_00118_DS_                        00000006
_CONFIG0                          00008000
_CONFIG1                          00008001
__2K7041                          00000001
__mulchar                         00000000
r0x1000                           00000000
r0x1001                           00000001
r0x1002                           00000002
r0x1003                           00000003
r0x1004                           00000004

Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

